services:
  database:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root_pass}
      AUTH_DB: ${AUTH_DB:-auth}
      AUTH_DB_USER: ${AUTH_DB_USER:-auth}
      AUTH_DB_PASS: ${AUTH_DB_PASS:-auth_pass}
      MAIN_DB: ${MAIN_DB:-main}
      MAIN_DB_USER: ${MAIN_DB_USER:-main}
      MAIN_DB_PASS: ${MAIN_DB_PASS:-main_pass}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}  # set this in the .env!
    healthcheck:
      test: [ "CMD", "/usr/local/bin/healthcheck.sh" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 3s
    volumes:
      - ./database/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./database/healthcheck.sh:/usr/local/bin/healthcheck.sh
    networks:
      booking:
        ipv4_address: 172.20.0.2

  auth:
    build:
      context: ./auth
    depends_on:
      database:
        condition: service_healthy
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${AUTH_DB:-auth}
      DB_USER: ${AUTH_DB_USER:-auth}
      DB_PASS: ${AUTH_DB_PASS:-auth_pass}
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8080/ping" ]
      interval: 10s
      retries: 2
      start_period: 10s
      timeout: 5s
    restart: on-failure
    networks:
      booking:
        ipv4_address: 172.20.0.3

  backend:
    build:
      context: ./backend
    depends_on:
      database:
        condition: service_healthy
      auth:
        condition: service_healthy
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${MAIN_DB:-main}
      DB_USER: ${MAIN_DB_USER:-main}
      DB_PASS: ${MAIN_DB_PASS:-main_pass}
      AUTH_HOST: auth
      AUTH_PORT: 8080
      ORIGIN: ${ORIGIN:-http://localhost}
      COWORKING_ROWS: ${COWORKING_ROWS:-2}
      COWORKING_COLS: ${COWORKING_ROWS:-3}
    ports:
      - "80:80"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:80/api/ping" ]
      interval: 10s
      retries: 2
      start_period: 10s
      timeout: 5s
    networks:
      booking:
        ipv4_address: 172.20.0.4

networks:
  booking:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
